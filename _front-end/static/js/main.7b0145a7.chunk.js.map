{"version":3,"sources":["serviceWorker.ts","redux/action-type.ts","models/user-model.ts","redux/store.ts","redux/reducer.ts","redux/app-state.ts","models/follow-model.ts","components/nav-bar/navBar.tsx","config.ts","components/home/home.tsx","services/user-validation.ts","components/registration/registration.tsx","components/login/login.tsx","components/admin/admin.tsx","services/date.ts","services/vacation-validation.ts","components/edit-vacation/editVacation.tsx","models/vacation-model.ts","components/add-vacation/addVacation.tsx","services/color.ts","components/reports/reports.tsx","components/purchase/purchase.tsx","components/purchases/purchases.tsx","components/app/app.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","ActionType","UserModel","firstName","lastName","userName","password","isAdmin","store","createStore","oldAppState","action","newAppState","type","SaveAllFollows","follows","payload","SaveAllVacations","vacations","saveOneVacation","i","vacationId","isFollow","addOneVacation","push","deleteOneVacation","filter","v","AddFollow","RemoveFollow","f","followId","PrepareVacationsForUser","counter","forEach","JSON","parse","sessionStorage","getItem","isNotFollow","concat","user","this","FollowModel","NavBar","props","state","setState","clear","className","to","exact","Button","onClick","logOut","Component","Config","serverUrl","_initialize","Home","unsubscribeStore","socket","addFollow","a","followToAdd","axios","post","emit","response","data","history","alert","removeFollow","followToRemove","find","delete","getState","io","connect","subscribe","length","get","response2","dispatch","on","vacationUpdated","vacationAdded","vacationRemoved","map","Card","key","Img","variant","src","img","Body","color","size","Title","destination","Text","description","ListGroup","ListGroupItem","Date","startingDate","toDateString","endingDate","price","validateUserName","validatePassword","Registration","setUserName","args","nameError","target","value","usersNames","error","validateAvailableUserName","errors","userNameError","setFirstName","validateFirstName","firstNameError","setLastName","validateLastName","lastNameError","setPassword","passwordError","verifyPasswordUser","verifyPassword","verifyPasswordError","isFormLegal","prop","toString","register","setItem","stringify","token","message","getAllUsersNames","name","id","placeholder","onChange","disabled","Login","login","Admin","getDataWithAjax","disconnect","JsonToString","date","d","setDate","getDate","toISOString","split","StringToJson","setHours","toJSON","validateDescription","validateDestination","validatePrice","EditVacation","setDescription","descriptionError","vacation","setDestination","destinationError","setImgUrl","imgError","setStartingDate","startingDateError","setEndingDate","endingDateError","setPrice","priceError","update","vacationToUpdate","console","log","put","params","e","Form","Group","controlId","Label","Control","VacationModel","AddVacation","add","addedVacation","getRandomColor","r","Math","floor","random","g","b","Reports","vacationsDestinations","vacationsFollows","colors","labels","datasets","label","backgroundColor","options","scales","yAxes","ticks","beginAtZero","userCallback","index","Purchase","setAmountOfTickets","purchase","tickets","totalPrice","send","dateNow","priceForTicket","Header","pattern","onInput","bind","Purchases","purchases","p","Table","striped","bordered","hover","App","interceptors","request","use","req","headers","authorization","res","path","render","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.7b0145a7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum ActionType {\r\n    SaveAllVacations,\r\n    SaveAllFollows,\r\n    PrepareVacationsForUser,\r\n    saveOneVacation,\r\n    addOneVacation,\r\n    deleteOneVacation,\r\n    AddFollow,\r\n    RemoveFollow\r\n}\r\n","\r\nexport class UserModel {\r\n\r\n    public constructor( // Compiler Magic\r\n        public firstName?: string,\r\n        public lastName?: string,\r\n        public userName?: string,\r\n        public password?: string,\r\n        public isAdmin?: boolean,\r\n        ) {\r\n    }\r\n}\r\n","import { createStore } from \"redux\";\r\nimport { reduce } from \"./reducer\";\r\nimport { AppState } from \"./app-state\";\r\n\r\nexport const store = createStore(reduce, new AppState());\r\n\r\n","import { AppState } from \"./app-state\";\r\nimport { Action } from \"./action\";\r\nimport { ActionType } from \"./action-type\";\r\nexport function reduce(oldAppState: AppState, action: Action): AppState {\r\n\r\n    const newAppState = { ...oldAppState }; // Duplicate the old state into a new state.\r\n\r\n    switch (action.type) {\r\n\r\n\r\n        case ActionType.SaveAllFollows:\r\n            newAppState.follows = action.payload;\r\n            break;\r\n\r\n        case ActionType.SaveAllVacations:\r\n            newAppState.vacations = action.payload;\r\n            break;\r\n\r\n        case ActionType.saveOneVacation:\r\n\r\n            for (let i in newAppState.vacations) {\r\n                if (newAppState.vacations[i].vacationId === action.payload.vacationId) {\r\n                    const follows=newAppState.vacations[i].follows;\r\n                    const isFollow=newAppState.vacations[i].isFollow;\r\n                    newAppState.vacations[i] = action.payload;\r\n                    newAppState.vacations[i].follows=follows;\r\n                    newAppState.vacations[i].isFollow=isFollow;\r\n                    \r\n                }\r\n\r\n            }\r\n\r\n            break;\r\n\r\n        case ActionType.addOneVacation:\r\n            newAppState.vacations.push(action.payload);\r\n            break;\r\n\r\n        case ActionType.deleteOneVacation:\r\n            // for(let i in newAppState.vacations){\r\n            newAppState.vacations = newAppState.vacations.filter(v => { return v.vacationId !== action.payload });\r\n            break;\r\n\r\n        case ActionType.AddFollow:\r\n            newAppState.follows.push(action.payload);\r\n            break;\r\n\r\n        case ActionType.RemoveFollow:\r\n            // for(let i in newAppState.vacations){\r\n            newAppState.follows = newAppState.follows.filter(f => { return f.followId !== action.payload });\r\n            break;\r\n\r\n        case ActionType.PrepareVacationsForUser:\r\n            //add per vacation number of followers and if the user is following\r\n            let counter = 0;\r\n            newAppState.vacations.forEach((v) => {\r\n                v.isFollow = false;\r\n                newAppState.follows.forEach((f) => {\r\n                    if (f.vacationId === v.vacationId) {\r\n                        counter++;\r\n                        if (f.userName === JSON.parse(sessionStorage.getItem(\"user\")).userName) {\r\n                            v.isFollow = true;\r\n                        }\r\n                    }\r\n                });\r\n                v.follows = counter;\r\n                counter = 0;\r\n            });\r\n\r\n            //sort array by followed vacations first\r\n            const isFollow = newAppState.vacations.filter((v) => v.isFollow === true);\r\n            const isNotFollow = newAppState.vacations.filter((v) => v.isFollow === false);\r\n            newAppState.vacations = isFollow.concat(isNotFollow);\r\n\r\n            break;\r\n\r\n        default: break;\r\n    }\r\n\r\n    return newAppState;\r\n}","import { VacationModel } from \"../models/vacation-model\";\r\nimport { FollowModel } from \"../models/follow-model\";\r\nimport { UserModel } from \"../models/user-model\";\r\n\r\nexport class AppState {\r\n    \r\n    public vacations: VacationModel[];\r\n    public follows: FollowModel[];\r\n    public user: UserModel;\r\n\r\n    public constructor() {\r\n        this.vacations = [];\r\n        this.follows=[];\r\n        this.user=new UserModel();\r\n    }\r\n}","export class FollowModel {\r\n\r\n    public constructor( // Compiler Magic\r\n        public followId?: number,\r\n        public userName?: string,\r\n        public vacationId?: number) {\r\n    }\r\n}\r\n\r\n","import React, { Component } from \"react\";\r\nimport \"./navBar.css\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { UserModel } from \"../../models/user-model\";\r\n\r\ninterface userState {\r\n    user: UserModel\r\n}\r\n\r\n\r\nexport class NavBar extends Component<any, userState>{\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            user: new UserModel()\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (sessionStorage.getItem(\"user\")) {\r\n            const user = JSON.parse(sessionStorage.getItem(\"user\"));\r\n            this.setState({ user });\r\n        }\r\n\r\n    }\r\n\r\n    private logOut() {\r\n        sessionStorage.clear();\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"nav-bar\">\r\n                <div className=\"nav-container\">\r\n                    <nav>\r\n                        {this.state.user.isAdmin ? (\r\n                            <ul>\r\n                                <li>\r\n                                    <NavLink to=\"/\" exact>Home</NavLink>\r\n                                </li>\r\n                                <li>\r\n                                    <NavLink to=\"/admin\" exact> Edit Vacation </NavLink>\r\n                                </li>\r\n                                <li>\r\n                                    <NavLink to=\"/admin/add\" exact> Add Vacation</NavLink>\r\n                                </li>\r\n                                <li>\r\n                                    <NavLink to=\"/purchases\" exact> Purchases</NavLink>\r\n                                </li>\r\n                                <li>\r\n                                    <NavLink to=\"/reports\" exact> Reports </NavLink>\r\n                                </li>\r\n                            </ul>\r\n                        ) :\r\n                            <ul>\r\n                                <li>\r\n                                    <NavLink to=\"/\" exact>Home</NavLink>\r\n                                </li>\r\n                            </ul>\r\n\r\n                        }\r\n                        <div className=\"user\">\r\n                            <div> Hello {this.state.user.userName} </div>\r\n\r\n                            <div>\r\n                                <NavLink to=\"/login\" exact>\r\n                                    <Button onClick={this.logOut}>Log out</Button>\r\n                                </NavLink>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                    </nav>\r\n\r\n                </div>\r\n                <div className=\"space\">\r\n\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}","export class Config{\r\n\r\n    public static serverUrl;\r\n\r\n    public static _initialize(){\r\n        if(process.env.NODE_ENV === \"production\"){\r\n            Config.serverUrl=\"https://itay-vacations.herokuapp.com\";\r\n        }\r\n\r\n        else{\r\n            Config.serverUrl=\"http://localhost:3000\";\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nConfig._initialize();","import React, { Component } from \"react\";\r\nimport \"./home.css\";\r\nimport { VacationModel } from \"../../models/vacation-model\";\r\nimport axios, { AxiosError } from \"axios\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport { store } from \"../../redux/store\";\r\nimport { FollowModel } from \"../../models/follow-model\";\r\nimport { ActionType } from \"../../redux/action-type\";\r\nimport Card from 'react-bootstrap/Card';\r\nimport ListGroupItem from 'react-bootstrap/ListGroupItem';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport { StarFill } from 'react-bootstrap-icons';\r\nimport io from \"socket.io-client\";\r\nimport { NavBar } from \"../nav-bar/navBar\";\r\nimport { Config } from \"../../config\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\n\r\n\r\ninterface VacationsState {\r\n    vacations: VacationModel[];\r\n    follows: FollowModel[];\r\n}\r\n\r\nexport class Home extends Component<any, VacationsState>{\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n    private socket;\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n\r\n        //get vacations and follows from the store\r\n        this.state = {\r\n            vacations: store.getState().vacations,\r\n            follows: store.getState().follows\r\n        };\r\n\r\n    }\r\n\r\n\r\n\r\n    public async componentDidMount() {\r\n\r\n        //if there is no token, link to the login page\r\n        if (!sessionStorage.getItem(\"token\") || !sessionStorage.getItem(\"user\")) {\r\n            this.props.history.push(\"/login\");\r\n            return;\r\n        }\r\n\r\n        //create connection to the server\r\n        this.socket = io.connect(\"http://localhost:3000\");\r\n\r\n        //if is there any changes in the store get the vacations and the follows from the new store.\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const vacations = store.getState().vacations;\r\n            const follows = store.getState().follows;\r\n            this.setState({ vacations, follows });\r\n        });\r\n\r\n        //if the store is empty, get the data with ajax\r\n        if (!(store.getState().follows.length > 0 && store.getState().vacations.length > 0)) {\r\n\r\n            try {\r\n                const response = await\r\n                    axios.get<VacationModel[]>(Config.serverUrl+\"/api/vacations\");\r\n                const vacations = response.data;\r\n\r\n                const response2 = await\r\n                    axios.get<FollowModel[]>(Config.serverUrl+\"/api/follows\");\r\n                const follows = response2.data;\r\n\r\n                store.dispatch({ type: ActionType.SaveAllFollows, payload: follows });\r\n                store.dispatch({ type: ActionType.SaveAllVacations, payload: vacations });\r\n                store.dispatch({ type: ActionType.PrepareVacationsForUser });\r\n            }\r\n\r\n            catch (err) {\r\n                if ((err as AxiosError).response?.data === \"Your login session has expired\") {\r\n                    sessionStorage.clear();\r\n                    this.props.history.push(\"/login\");\r\n                    return;\r\n                }\r\n\r\n                else {\r\n                    alert(err);\r\n                }\r\n            }\r\n        }\r\n\r\n        //listen to actions from the server\r\n        this.socket.on(\"Admin-updated-a-vacation-from-server\", vacationUpdated => {\r\n            store.dispatch({ type: ActionType.saveOneVacation, payload: vacationUpdated });\r\n        });\r\n        this.socket.on(\"added-vacation-from-server\", vacationAdded => {\r\n            store.dispatch({ type: ActionType.addOneVacation, payload: vacationAdded });\r\n        });\r\n        this.socket.on(\"removed-vacation-from-server\", vacationRemoved => {\r\n            store.dispatch({ type: ActionType.deleteOneVacation, payload: vacationRemoved });\r\n        });\r\n        this.socket.on(\"follows-updated-from-server\", async () => {\r\n            const response2 = await\r\n                axios.get<FollowModel[]>(Config.serverUrl+\"/api/follows\");\r\n            const follows = response2.data;\r\n            store.dispatch({ type: ActionType.SaveAllFollows, payload: follows });\r\n            store.dispatch({ type: ActionType.PrepareVacationsForUser });\r\n        });\r\n\r\n    }\r\n\r\n\r\n\r\n    //add a follow for vacation in the database, and emit\r\n    private addFollow = async (vacationId) => {\r\n        const followToAdd = new FollowModel();\r\n        followToAdd.userName = JSON.parse(sessionStorage.getItem(\"user\")).userName;\r\n        followToAdd.vacationId = vacationId;\r\n        try {\r\n            await axios.post<FollowModel>(Config.serverUrl+\"/api/follows\", followToAdd);\r\n            this.socket.emit(\"user-changed-a-follow-from-client\");\r\n        }\r\n\r\n        catch (err) {\r\n            if ((err as AxiosError).response?.data === \"Your login session has expired\") {\r\n                sessionStorage.clear();\r\n                this.props.history.push(\"/login\");\r\n                return;\r\n            }\r\n\r\n            else {\r\n                alert(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    //add a follow for vacation in the database, and emit\r\n    private removeFollow = async (vacationId) => {\r\n\r\n        const userName = JSON.parse(sessionStorage.getItem(\"user\")).userName;\r\n\r\n        const followToRemove = this.state.follows.find(f => {\r\n            return f.userName === userName && f.vacationId === vacationId\r\n        });\r\n\r\n        try {\r\n            await axios.delete(`${Config.serverUrl}/api/follows/${followToRemove.followId}`);\r\n            this.socket.emit(\"user-changed-a-follow-from-client\");\r\n        }\r\n\r\n        catch (err) {\r\n            if ((err as AxiosError).response?.data === \"Your login session has expired\") {\r\n                sessionStorage.clear();\r\n                this.props.history.push(\"/login\");\r\n                return;\r\n            }\r\n\r\n            else {\r\n                alert(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    //disconnect from the server and the store\r\n    /*\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore();\r\n        this.socket.disconnect();\r\n    }*/\r\n\r\n\r\n\r\n    public render() {\r\n\r\n        return (\r\n            <div className=\"home\">\r\n                <NavBar />\r\n                <div className=\"card-container\">\r\n                    {this.state.vacations.map(v =>\r\n\r\n\r\n                        <Card   key={v.vacationId}>\r\n                            <Card.Img variant=\"top\" className=\"img\" src={\"/assets/images/vacations/\" + v.img} />\r\n                            <Card.Body>\r\n                                {v.isFollow ? <StarFill className=\"star-fill\" color=\"yellow\" size={\"1.5rem\"} onClick={() => this.removeFollow(v.vacationId)} /> : <StarFill className=\"star-fill\" color=\"grey\" size={\"1.5rem\"} onClick={() => this.addFollow(v.vacationId)} />}\r\n\r\n                                <Card.Title>{v.destination}</Card.Title>\r\n                                <Card.Text>\r\n                                    {v.description}\r\n                                </Card.Text>\r\n                            </Card.Body>\r\n                            <ListGroup className=\"list-group-flush\">\r\n                                <ListGroupItem>Follows: {v.follows}</ListGroupItem>\r\n                                <ListGroupItem>Start: {new Date(v.startingDate).toDateString()}</ListGroupItem>\r\n                                <ListGroupItem>end: {new Date(v.endingDate).toDateString()}</ListGroupItem>\r\n                                <ListGroupItem>Cost: {v.price}$</ListGroupItem>\r\n                                <ListGroupItem><NavLink className=\"purchase\" to={\"/purchase/\"+v.vacationId} exact> purchase </NavLink></ListGroupItem>\r\n                            </ListGroup>\r\n                        </Card>\r\n                    )}\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}","export function validateAvailableUserName(userName,usersNames){\r\n    let error=\"\";\r\n    usersNames.forEach(user=>{\r\n        if(userName===user.userName){\r\n            error=\"user name is not available\";\r\n        }\r\n    });\r\n    return error;\r\n}\r\n\r\nexport function validateUserName(userName){\r\n\r\n    if (userName === \"\") {\r\n        return \"Missing user name\";\r\n    }\r\n\r\n    else if(userName.length < 2){\r\n        return \"User name too short\";\r\n    }\r\n\r\n    else if (userName.length > 15) {\r\n        return \"User name too long\";\r\n    }\r\n    return \"\";\r\n}\r\n\r\n\r\nexport function validateFirstName(firstName){\r\n    if (firstName === \"\") {\r\n        return \"Missing first name\";\r\n    }\r\n\r\n    else if(firstName.length < 2){\r\n        return  \"first name is too short\";\r\n    }\r\n    \r\n    else if (firstName.length > 10) {\r\n        return  \"first name is too long\";\r\n    }\r\n\r\n    else if(!('A'<=firstName[0] && firstName[0] <='Z')){\r\n        return  \"first name must start with a capital letter\";\r\n    }\r\n\r\n    return \"\";\r\n}\r\n\r\n\r\nexport function validateLastName(lastName){\r\n    if (lastName === \"\") {\r\n        return  \"Missing last name\";\r\n    }\r\n\r\n    else if(lastName.length < 2){\r\n        return  \"last name is too short\";\r\n    }\r\n    \r\n    else if (lastName.length > 10) {\r\n        return  \"last name is too long\";\r\n    }\r\n\r\n    else if(!('A'<=lastName[0] && lastName[0] <='Z')){\r\n        return  \"first name must start with a capital letter\";\r\n    }\r\n\r\n    return \"\";\r\n}\r\n\r\n\r\n\r\nexport function validatePassword(password){\r\n    if (password === \"\") {\r\n        return \"Missing password\";\r\n    }\r\n\r\n    else if(password.length < 6){\r\n        return \"password is too short\";\r\n    }\r\n    \r\n    else if (password.length > 10) {\r\n        return \"password is too long\";\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport function verifyPassword(verifyPassword,password){\r\n    if(verifyPassword===\"\"){\r\n        return \"Missing verified password\";\r\n    }\r\n    else if (verifyPassword !== password) {\r\n        return \"verify password\";\r\n    }\r\n    return \"\";\r\n}","import React, { Component, ChangeEvent } from \"react\";\r\nimport \"./registration.css\";\r\nimport axios from \"axios\";\r\nimport { UserModel } from \"../../models/user-model\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {\r\n    validateAvailableUserName,\r\n    validateUserName,\r\n    validateFirstName,\r\n    validateLastName,\r\n    validatePassword,\r\n    verifyPassword}\r\n     from \"../../services/user-validation\";\r\nimport { Config } from \"../../config\";\r\n\r\ninterface UserState {\r\n    user: UserModel;\r\n    usersNames: UserModel[];\r\n    errors: {   userNameError: string,\r\n                firstNameError: string,\r\n                lastNameError: string,\r\n                passwordError: string,\r\n                verifyPasswordError: string\r\n              };\r\n\r\n}\r\n\r\nexport class Registration extends Component<any,UserState>{\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            user: new UserModel(),\r\n            usersNames: [],\r\n            errors: { userNameError: \"*\", firstNameError: \"*\", lastNameError: \"*\",passwordError:\"*\",verifyPasswordError:\"*\"}\r\n        };\r\n    }\r\n\r\n    private setUserName = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const userName = args.target.value;\r\n\r\n        let nameError;\r\n\r\n        nameError = validateAvailableUserName(userName,this.state.usersNames);\r\n        if(nameError!==\"user name is not available\"){\r\n            nameError=validateUserName(userName);\r\n        }\r\n        \r\n        const errors = { ...this.state.errors };\r\n        errors.userNameError = nameError;\r\n        this.setState({ errors });\r\n\r\n        const user = { ...this.state.user };\r\n        user.userName = userName;\r\n        this.setState({ user });\r\n    }\r\n\r\n    private setFirstName = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const firstName = args.target.value;\r\n\r\n        let nameError = validateFirstName(firstName);\r\n\r\n        const errors = { ...this.state.errors };\r\n        errors.firstNameError = nameError;\r\n        this.setState({ errors });\r\n\r\n        const user = { ...this.state.user };\r\n        user.firstName = firstName;\r\n        this.setState({ user });\r\n\r\n    }\r\n\r\n    private setLastName = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const lastName = args.target.value;\r\n\r\n        let nameError = validateLastName(lastName);\r\n\r\n        const errors = { ...this.state.errors };\r\n        errors.lastNameError = nameError;\r\n        this.setState({ errors });\r\n\r\n        const user = { ...this.state.user };\r\n        user.lastName = lastName;\r\n        this.setState({ user });\r\n\r\n    }\r\n\r\n    private setPassword = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const password = args.target.value;\r\n\r\n        let nameError = validatePassword(password);\r\n\r\n        const errors = { ...this.state.errors };\r\n        errors.passwordError = nameError;\r\n        this.setState({ errors });\r\n\r\n        const user = { ...this.state.user };\r\n        user.password = password;\r\n        this.setState({ user });\r\n\r\n    }\r\n\r\n    private verifyPasswordUser = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const verifiedPassword = args.target.value;\r\n        const user = { ...this.state.user };\r\n        \r\n        let nameError = verifyPassword(verifiedPassword,user.password);\r\n\r\n        const errors = { ...this.state.errors };\r\n        errors.verifyPasswordError = nameError;\r\n        this.setState({ errors });\r\n    }\r\n\r\n    private isFormLegal = () => {\r\n        for (const prop in this.state.errors) {\r\n            if (this.state.errors[prop].toString() !== \"\") {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private register = async () => {\r\n\r\n        try {\r\n            const response = await axios.post(Config.serverUrl+\"/api/auth/register\",\r\n                this.state.user);\r\n\r\n            sessionStorage.setItem(\"user\", JSON.stringify(response.data.user));\r\n            sessionStorage.setItem(\"token\", response.data.token);\r\n\r\n            this.props.history.push(\"/\");\r\n        }\r\n\r\n        catch (err) {\r\n            alert(err.message);\r\n        }\r\n\r\n    }\r\n\r\n    public async getAllUsersNames(){\r\n        try{\r\n            const response = await axios.get<UserModel[]>(Config.serverUrl+\"/api/auth/usersNames\");\r\n            const usersNames=response.data;\r\n\r\n            this.setState({usersNames});\r\n        }\r\n\r\n        catch(err)\r\n        {\r\n            alert(err);\r\n        }\r\n    }\r\n\r\n\r\n    public componentDidMount(){\r\n        //if the user is logged in, navigate to home page\r\n        if (sessionStorage.getItem(\"token\")) {\r\n            this.props.history.push(\"/\");\r\n            return;\r\n        }\r\n\r\n        this.getAllUsersNames();\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"registration\">\r\n                <div className=\"cardRegistration\">\r\n                    <h1>Sign up</h1>\r\n                    <input type=\"text\" name=\"\" id=\"userBox\" placeholder=\"User Name\" onChange={this.setUserName}/>\r\n                    <span>{this.state.errors.userNameError}</span>\r\n                    <input type=\"text\" name=\"\" id=\"userBox\" placeholder=\"First Name\" onChange={this.setFirstName}/>\r\n                    <span>{this.state.errors.firstNameError}</span>\r\n                    <input type=\"text\" name=\"\" id=\"userBox\" placeholder=\"Last Name\" onChange={this.setLastName}/>\r\n                    <span>{this.state.errors.lastNameError}</span>\r\n                    <input type=\"password\" name=\"\" id=\"userBox\" placeholder=\"Password\" onChange={this.setPassword}/>\r\n                    <span>{this.state.errors.passwordError}</span>\r\n                    <input type=\"password\" name=\"\" id=\"userBox\" placeholder=\"Verify Password\" onChange={this.verifyPasswordUser}/>\r\n                    <span>{this.state.errors.verifyPasswordError}</span>\r\n                    <br/>\r\n                    <button disabled={!this.isFormLegal()} onClick={this.register}>Sign up</button>\r\n                    <NavLink className=\"navigateLogin\" to=\"/login\" exact>Do you have an account? Sign in now</NavLink>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component, ChangeEvent } from \"react\";\r\nimport \"./login.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport axios, { AxiosError } from \"axios\";\r\nimport { UserModel } from \"../../models/user-model\";\r\nimport { validateUserName, validatePassword } from \"../../services/user-validation\";\r\nimport { Config } from \"../../config\";\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\n\r\ninterface UserState {\r\n    user: UserModel;\r\n    errors: {\r\n        userNameError: string,\r\n        passwordError: string,\r\n    };\r\n}\r\n\r\nexport class Login extends Component<any, UserState>{\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            user: new UserModel(),\r\n            errors: { userNameError: \"*\", passwordError: \"*\" }\r\n\r\n        };\r\n    }\r\n\r\n    private setUserName = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const userName = args.target.value;\r\n\r\n        let nameError = validateUserName(userName);\r\n\r\n        const errors = { ...this.state.errors };\r\n        errors.userNameError = nameError;\r\n        this.setState({ errors });\r\n\r\n        const user = { ...this.state.user };\r\n        user.userName = userName;\r\n        this.setState({ user });\r\n\r\n    }\r\n\r\n    private setPassword = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const password = args.target.value;\r\n\r\n        let nameError = validatePassword(password);\r\n\r\n        const errors = { ...this.state.errors };\r\n        errors.passwordError = nameError;\r\n        this.setState({ errors });\r\n\r\n        const user = { ...this.state.user };\r\n        user.password = password;\r\n        this.setState({ user });\r\n    }\r\n\r\n    private login = async () => {\r\n\r\n        try {\r\n            const response = await axios.post(Config.serverUrl + \"/api/auth/login\",\r\n                this.state.user);\r\n            sessionStorage.setItem(\"user\", JSON.stringify(response.data.user));\r\n            sessionStorage.setItem(\"token\", response.data.token);\r\n\r\n            this.props.history.push(\"/\");\r\n        }\r\n\r\n        catch (err) {\r\n            if ((err as AxiosError).response?.data === \"Illegal username or password\") {\r\n                alert((err as AxiosError).response?.data);\r\n                return;\r\n            }\r\n\r\n            else {\r\n                alert(err);\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //check if the form is legal\r\n    private isFormLegal = () => {\r\n        for (const prop in this.state.errors) {\r\n            if (this.state.errors[prop].toString() !== \"\") {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    public componentDidMount() {\r\n        //if the user is logged in, navigate to Home page\r\n        if (sessionStorage.getItem(\"token\") && JSON.parse(sessionStorage.getItem(\"user\"))) {\r\n            this.props.history.push(\"/\");\r\n            return;\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"login\">\r\n                <div className=\"card-login\">\r\n                    <form className=\"form-login\" action=\"\">\r\n                        <h1>Login</h1>\r\n                        <input type=\"text\" name=\"\" id=\"userBox\" placeholder=\"User Name\" onChange={this.setUserName} />\r\n                        <input type=\"password\" name=\"\" id=\"userBox\" placeholder=\"Password\" onChange={this.setPassword} />\r\n                        <br />\r\n                        {/* <button disabled={!this.isFormLegal()} onClick={this.login}>Login</button> */}\r\n                        <Button variant=\"primary\" type=\"submit\" disabled={!this.isFormLegal()} onClick={this.login}>\r\n                            Login\r\n                        </Button >\r\n                    </form>\r\n                    <NavLink className=\"navigate\" to=\"/registration\" exact>Not a member? Sign up now</NavLink>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport \"./admin.css\";\r\nimport { VacationModel } from \"../../models/vacation-model\";\r\nimport axios, { AxiosError } from \"axios\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport { store } from \"../../redux/store\";\r\nimport { ActionType } from \"../../redux/action-type\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Card from 'react-bootstrap/Card';\r\nimport ListGroupItem from 'react-bootstrap/ListGroupItem';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport { X } from 'react-bootstrap-icons';\r\nimport { Pencil } from 'react-bootstrap-icons';\r\nimport io from \"socket.io-client\";\r\nimport { NavBar } from \"../nav-bar/navBar\";\r\nimport { Config } from \"../../config\";\r\n\r\n\r\n\r\ninterface VacationsState {\r\n    vacations: VacationModel[];\r\n}\r\n\r\nexport class Admin extends Component<any, VacationsState>{\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n    private socket;\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n\r\n        //get vacations from the store\r\n        this.state = {\r\n            vacations: store.getState().vacations\r\n        };\r\n    }\r\n\r\n    public async componentDidMount() {\r\n        \r\n        //if there is no token, link to the login page\r\n        if (!sessionStorage.getItem(\"token\") || !sessionStorage.getItem(\"user\")) {\r\n            this.props.history.push(\"/login\");\r\n            return;\r\n        }\r\n\r\n        //if user is not admin, link to the Home page\r\n        else if (!JSON.parse(sessionStorage.getItem(\"user\")).isAdmin) {\r\n            this.props.history.push(\"/\");\r\n        }\r\n\r\n        //create connection to the server\r\n        this.socket = io.connect(\"http://localhost:3000\");\r\n\r\n        //if is there any changes in the store get the vacations from the new store.\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const vacations = store.getState().vacations;\r\n            this.setState({ vacations });\r\n        });\r\n\r\n\r\n        // if the store is not empty, cancel the function and don't use axios\r\n        if (this.state.vacations.length > 0) {\r\n            return;\r\n        }\r\n\r\n        //if the store is empty, get the data with ajax\r\n        this.getDataWithAjax();\r\n\r\n        //listen to actions from the server\r\n        this.socket.on(\"Admin-updated-a-vacation-from-server\", vacationUpdated => {\r\n            store.dispatch({ type: ActionType.saveOneVacation, payload: vacationUpdated });\r\n        });\r\n        this.socket.on(\"added-vacation-from-server\", vacationAdded => {\r\n            store.dispatch({ type: ActionType.addOneVacation, payload: vacationAdded });\r\n        });\r\n        this.socket.on(\"removed-vacation-from-server\", vacationRemoved => {\r\n            store.dispatch({ type: ActionType.deleteOneVacation, payload: vacationRemoved });\r\n        });\r\n\r\n\r\n    }\r\n\r\n    //disconnect from the server and the store\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore();\r\n        this.socket.disconnect();\r\n    }\r\n\r\n    //function for getting the vacations with ajax and save in the store\r\n    private getDataWithAjax= async ()=>{\r\n        try {\r\n            const response = await\r\n                axios.get<VacationModel[]>(Config.serverUrl+\"/api/vacations\");\r\n            const vacations = response.data;\r\n            store.dispatch({ type: ActionType.SaveAllVacations, payload: vacations });\r\n        }\r\n\r\n        catch (err) {\r\n            if ((err as AxiosError).response?.data === \"Your login session has expired\") {\r\n                sessionStorage.clear();\r\n                alert((err as AxiosError).response?.data);\r\n                this.props.history.push(\"/login\");\r\n                return;\r\n            }\r\n\r\n            else {\r\n                alert(err);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    //delete a vacation from the database and the store, and emit\r\n    private async delete(vacationId) {\r\n        try {\r\n            await axios.delete(`${Config.serverUrl}/api/vacations/${vacationId}`);\r\n            store.dispatch({ type: ActionType.deleteOneVacation, payload: vacationId });\r\n            this.socket.emit(\"Admin-removed-a-vacation-from-client\", vacationId);\r\n        }\r\n\r\n        catch (err) {\r\n            if ((err as AxiosError).response?.data === \"Your login session has expired\") {\r\n                sessionStorage.clear();\r\n                alert((err as AxiosError).response?.data);\r\n                this.props.history.push(\"/login\");\r\n                return;\r\n            }\r\n\r\n            else {\r\n                alert(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"home\">\r\n                <NavBar />\r\n                <div className=\"card-container\">\r\n                {this.state.vacations.map(v =>\r\n\r\n                    <Card key={v.vacationId}>\r\n                        <Card.Img variant=\"top\" className=\"img\" src={\"/assets/images/vacations/\"+v.img} />\r\n                        <Card.Body>\r\n                            <X className=\"delete\" color=\"black\" size={\"1.5rem\"} onClick={() => this.delete(v.vacationId)} />\r\n                            <NavLink to={\"/admin/\" + v.vacationId}>\r\n                                <Pencil color=\"black\" size={\"1.5rem\"} />\r\n                            </NavLink>\r\n                            <Card.Title>{v.destination}</Card.Title>\r\n                            <Card.Text>\r\n                                {v.description}\r\n                            </Card.Text>\r\n\r\n                        </Card.Body>\r\n                        <ListGroup className=\"list-group-flush\">\r\n                            <ListGroupItem>Start: {new Date(v.startingDate).toDateString()}</ListGroupItem>\r\n                            <ListGroupItem>end: {new Date(v.endingDate).toDateString()}</ListGroupItem>\r\n                            <ListGroupItem>Cost: {v.price}$</ListGroupItem>\r\n                        </ListGroup>\r\n                    </Card>\r\n                )}\r\n                </div>\r\n                <br />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}","export function JsonToString(date){\r\n    const d=new Date(date);\r\n    d.setDate(d.getDate()+1);\r\n    const stringDate=d.toISOString();\r\n    const arr=stringDate.split(\"T\");\r\n   return arr[0];\r\n   \r\n}\r\n\r\nexport function StringToJson(date){\r\n    const d=new Date(date);\r\n    d.setDate(d.getDate()-1);\r\n    d.setHours(24);\r\n    const stringDate=d.toJSON();\r\n    return stringDate;\r\n}","\r\nexport function validateDescription(description){\r\n\r\n    if (description === \"\") {\r\n        return \"Missing description\";\r\n    }\r\n\r\n    else if(description.length < 3){\r\n        return \"Description is too short\";\r\n    }\r\n\r\n    else if (description.length > 200) {\r\n        return \"Description is too long\";\r\n    }\r\n    return \"\";\r\n}\r\n\r\n\r\nexport function validateDestination(destination){\r\n    if (destination === \"\") {\r\n        return \"Missing destination\";\r\n    }\r\n\r\n    else if(destination.length < 2){\r\n        return  \"Destination is too short\";\r\n    }\r\n    \r\n    else if (destination.length > 30) {\r\n        return  \"Destination is too long\";\r\n    }\r\n\r\n    else if(!('A'<=destination[0] && destination[0] <='Z')){\r\n        return  \"Destination must start with a capital letter\";\r\n    }\r\n    return \"\";\r\n}\r\n\r\n\r\nexport function validateImgUrl(img){\r\n    return \"\";\r\n}\r\n\r\nexport function validateStartingDate(date){\r\n    return \"\";\r\n}\r\n\r\nexport function validateEndingDate(date){\r\n    return \"\";\r\n\r\n}\r\n\r\n\r\n\r\nexport function validatePrice(price){\r\n\r\n    if (!price) {\r\n        return \"Missing price\";\r\n    }\r\n\r\n    else if(price < 0){\r\n        return \"Price can't be negative\";\r\n    }\r\n    \r\n    else if (price > 50000) {\r\n        return \"Price is too high\";\r\n    }\r\n    return \"\";\r\n}\r\n\r\n","import React, { Component, ChangeEvent } from \"react\";\r\nimport \"./editVacation.css\";\r\nimport { VacationModel } from \"../../models/vacation-model\";\r\nimport axios, { AxiosError } from \"axios\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport { store } from \"../../redux/store\";\r\nimport { JsonToString } from \"../../services/date\";\r\nimport { StringToJson } from \"../../services/date\";\r\nimport { validateDescription, validateDestination, validateImgUrl, validateStartingDate, validateEndingDate, validatePrice } from \"../../services/vacation-validation\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport io from \"socket.io-client\";\r\nimport { NavBar } from \"../nav-bar/navBar\";\r\nimport { ActionType } from \"../../redux/action-type\";\r\nimport { Config } from \"../../config\";\r\n\r\ninterface VacationState {\r\n    vacations: VacationModel[];\r\n    vacation: VacationModel;\r\n    errors: {\r\n        descriptionError: string,\r\n        destinationError: string,\r\n        imgError: string,\r\n        startingDateError: string,\r\n        endingDateError: string,\r\n        priceError: string\r\n    };\r\n}\r\n\r\nexport class EditVacation extends Component<any, VacationState>{\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n    private socket;\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n\r\n        //get vacations from the store\r\n        this.state = {\r\n            vacations: store.getState().vacations,\r\n            vacation: {},\r\n            errors: { descriptionError: \"\", destinationError: \"\", imgError: \"\", startingDateError: \"\", endingDateError: \"\", priceError: \"\" }\r\n        };\r\n\r\n    }\r\n\r\n\r\n\r\n    public async componentDidMount() {\r\n\r\n\r\n        //create connection to the server\r\n        this.socket = io.connect(\"http://localhost:3000\");\r\n\r\n\r\n        //if is there any changes in the store get the vacations from the new store.\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const vacations = store.getState().vacations;\r\n            this.setState({ vacations });\r\n        });\r\n\r\n        //if there is no token, link to the login page\r\n        if (!sessionStorage.getItem(\"token\") || !sessionStorage.getItem(\"user\")) {\r\n            this.props.history.push(\"/login\");\r\n            return;\r\n        }\r\n\r\n        //if user is not admin, link to the Home page\r\n        else if (!JSON.parse(sessionStorage.getItem(\"user\")).isAdmin) {\r\n            this.props.history.push(\"/\");\r\n        }\r\n\r\n\r\n\r\n        let vacation;\r\n\r\n        //if the store is not empty, find the vacation for edit and don't use axios at all\r\n        if (this.state.vacations.length > 0) {\r\n\r\n            for (let v of this.state.vacations) {\r\n                if (v.vacationId === +this.props.match.params.id) {\r\n                    vacation = ({ ...v });\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        // if the store is empty, get the vacation for edit with axios\r\n        else {\r\n            try {\r\n                const response = await\r\n                    axios.get<VacationModel>(`${Config.serverUrl}/api/vacations/${+this.props.match.params.id}`);\r\n                // console.log(response);\r\n                vacation = response.data;\r\n\r\n            }\r\n\r\n\r\n            catch (err) {\r\n                console.log(err as AxiosError);\r\n                if ((err as AxiosError).response?.data === \"Your login session has expired\") {\r\n                    sessionStorage.clear();\r\n                    alert(err);\r\n                    // this.props.history.push(\"/login\");\r\n                    return;\r\n                }\r\n\r\n                else {\r\n                    alert((err as AxiosError).response?.data);\r\n                }\r\n\r\n            }\r\n\r\n\r\n\r\n        }\r\n\r\n        //treatment with json date format\r\n        vacation.startingDate = JsonToString(vacation.startingDate);\r\n        vacation.endingDate = JsonToString(vacation.endingDate);\r\n        this.setState({ vacation });\r\n\r\n    }\r\n\r\n    //disconnect from the server and the store\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore();\r\n        this.socket.disconnect();\r\n    }\r\n\r\n    //get the data from inputs to the state\r\n    public setDescription = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const description = args.target.value;\r\n        let nameError;\r\n\r\n        nameError = validateDescription(description);\r\n\r\n        const errors = { ...this.state.errors };\r\n        errors.descriptionError = nameError;\r\n        this.setState({ errors });\r\n\r\n        const vacation = { ...this.state.vacation };\r\n        vacation.description = description;\r\n        this.setState({ vacation });\r\n    }\r\n    public setDestination = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const destination = args.target.value;\r\n        let nameError;\r\n\r\n        nameError = validateDestination(destination);\r\n\r\n        const errors = { ...this.state.errors };\r\n        errors.destinationError = nameError;\r\n        this.setState({ errors });\r\n\r\n        const vacation = { ...this.state.vacation };\r\n        vacation.destination = destination;\r\n        this.setState({ vacation });\r\n    }\r\n\r\n    public setImgUrl = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const img = args.target.value;\r\n        let nameError;\r\n\r\n        nameError = validateImgUrl(img);\r\n\r\n        const errors = { ...this.state.errors };\r\n        errors.imgError = nameError;\r\n        this.setState({ errors });\r\n\r\n        const vacation = { ...this.state.vacation };\r\n        vacation.img = img;\r\n        this.setState({ vacation });\r\n    }\r\n    public setStartingDate = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const startingDate = args.target.value;\r\n        let nameError;\r\n\r\n        nameError = validateStartingDate(startingDate);\r\n\r\n        const errors = { ...this.state.errors };\r\n        errors.startingDateError = nameError;\r\n        this.setState({ errors });\r\n\r\n        const vacation = { ...this.state.vacation };\r\n        // vacation.startingDate=new Date(startingDate).toJSON();\r\n        vacation.startingDate = startingDate;\r\n        this.setState({ vacation });\r\n    }\r\n    public setEndingDate = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const endingDate = args.target.value;\r\n        let nameError;\r\n\r\n        nameError = validateEndingDate(endingDate);\r\n\r\n        const errors = { ...this.state.errors };\r\n        errors.endingDateError = nameError;\r\n        this.setState({ errors });\r\n\r\n        const vacation = { ...this.state.vacation };\r\n        // vacation.endingDate = new Date(endingDate).toJSON();\r\n        vacation.endingDate = endingDate;\r\n        this.setState({ vacation });\r\n    }\r\n\r\n    private setPrice = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const price = +args.target.value;\r\n        let nameError;\r\n\r\n        nameError = validatePrice(price);\r\n\r\n        const errors = { ...this.state.errors };\r\n        errors.priceError = nameError;\r\n        this.setState({ errors });\r\n\r\n        const vacation = { ...this.state.vacation };\r\n        vacation.price = price;\r\n        this.setState({ vacation });\r\n    }\r\n\r\n    private isFormLegal() {\r\n        for (const prop in this.state.errors) {\r\n            if (this.state.errors[prop].toString() !== \"\") {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public update = async () => {\r\n        try {\r\n            const vacationToUpdate = { ...this.state.vacation }\r\n            console.log(vacationToUpdate);\r\n            console.log(Config.serverUrl);\r\n            await axios.put(`${Config.serverUrl}/api/vacations/${+this.props.match.params.id}`,\r\n                vacationToUpdate);\r\n            console.log(\"after axios\");\r\n            vacationToUpdate.startingDate = StringToJson(vacationToUpdate.startingDate);\r\n            vacationToUpdate.endingDate = StringToJson(vacationToUpdate.endingDate);\r\n            store.dispatch({ type: ActionType.saveOneVacation, payload: vacationToUpdate });\r\n            this.socket.emit(\"Admin-updated-a-vacation-from-client\", vacationToUpdate);\r\n            this.props.history.push(\"/admin\");\r\n        }\r\n\r\n        catch (err) {\r\n            console.log(\"err\");\r\n            console.log(err);\r\n            if ((err as AxiosError).response?.data === \"Your login session has expired\") {\r\n                sessionStorage.clear();\r\n                alert((err as AxiosError).response?.data);\r\n                this.props.history.push(\"/login\");\r\n                return;\r\n            }\r\n\r\n            else if ((err as AxiosError).response?.data === \"You are not admin!\") {\r\n                this.props.history.push(\"/login\");\r\n                return;\r\n            }\r\n\r\n            else {\r\n                alert(err);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"EditVacation\">\r\n                <NavBar />\r\n                <div className=\"form-container\">\r\n                    <h1>Edit Vacation</h1>\r\n                    <br />\r\n                    <Form>\r\n\r\n                        <Form.Group controlId=\"formBasicText\">\r\n                            <Form.Label>Destination</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter description\" value={this.state.vacation.destination || \"\"} onChange={this.setDestination} />\r\n                            <Form.Text className=\"text-muted\">\r\n                                {this.state.errors.destinationError}\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formBasicText\">\r\n                            <Form.Label>Description</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter description\" value={this.state.vacation.description || \"\"} onChange={this.setDescription} />\r\n                            <Form.Text className=\"text-muted\" >\r\n                                {this.state.errors.descriptionError}\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formBasicText\">\r\n                            <Form.Label>Image URL</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter description\" value={this.state.vacation.img || \"\"} onChange={this.setImgUrl} />\r\n                            <Form.Text className=\"text-muted\" >\r\n                                {this.state.errors.imgError}\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formBasicText\">\r\n                            <Form.Label>Start Date</Form.Label>\r\n                            <Form.Control type=\"date\" placeholder=\"Enter description\" value={this.state.vacation.startingDate || \"\"} onChange={this.setStartingDate} />\r\n                            <Form.Text className=\"text-muted\">\r\n                                {this.state.errors.startingDateError}\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formBasicText\">\r\n                            <Form.Label>Ending Date</Form.Label>\r\n                            <Form.Control type=\"date\" placeholder=\"Enter description\" value={this.state.vacation.endingDate || \"\"} onChange={this.setEndingDate} />\r\n                            <Form.Text className=\"text-muted\">\r\n                                {this.state.errors.endingDateError}\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formBasicText\">\r\n                            <Form.Label>Price</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter description\" value={this.state.vacation.price || \"\"} onChange={this.setPrice} />\r\n                            <Form.Text className=\"text-muted\">\r\n                                {this.state.errors.priceError}\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Button variant=\"primary\" type=\"submit\" disabled={!this.isFormLegal()} onClick={this.update}>\r\n                            Submit\r\n                        </Button >\r\n                    </Form>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}","export class VacationModel {\r\n\r\n    public constructor( // Compiler Magic\r\n        public vacationId?: number,\r\n        public description?: string,\r\n        public destination?: string,\r\n        public img?: string,\r\n        public startingDate?: string,\r\n        public endingDate?: string,\r\n        public price?: number,\r\n        public follows?: number,\r\n        public isFollow?: boolean) {\r\n    }\r\n}\r\n\r\n","import React, { Component, ChangeEvent } from \"react\";\r\nimport \"./addVacation.css\";\r\nimport { VacationModel } from \"../../models/vacation-model\";\r\nimport axios, { AxiosError } from \"axios\";\r\nimport { store } from \"../../redux/store\";\r\nimport { ActionType } from \"../../redux/action-type\";\r\nimport {\r\n    validateDescription,\r\n    validateDestination,\r\n    validateImgUrl,\r\n    validateStartingDate,\r\n    validateEndingDate,\r\n    validatePrice\r\n} from \"../../services/vacation-validation\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport io from \"socket.io-client\";\r\nimport { NavBar } from \"../nav-bar/navBar\";\r\nimport { StringToJson } from \"../../services/date\";\r\nimport { Config } from \"../../config\";\r\n\r\n\r\ninterface VacationState {\r\n    vacation: VacationModel;\r\n    errors: {\r\n        descriptionError: string,\r\n        destinationError: string,\r\n        imgError: string,\r\n        startingDateError: string,\r\n        endingDateError: string,\r\n        priceError: string\r\n    };\r\n\r\n}\r\n\r\nexport class AddVacation extends Component<any, VacationState>{\r\n\r\n    private socket;\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            vacation: new VacationModel(),\r\n            errors: { descriptionError: \"*\", destinationError: \"*\", imgError: \"*\", startingDateError: \"*\", endingDateError: \"*\", priceError: \"*\" }\r\n\r\n        };\r\n    }\r\n\r\n\r\n    public async componentDidMount() {\r\n\r\n        //if there is no token, link to the login page\r\n        if (!sessionStorage.getItem(\"token\") || !sessionStorage.getItem(\"user\")) {\r\n            this.props.history.push(\"/login\");\r\n            return;\r\n        }\r\n\r\n        //if user is not admin, link to the Home page\r\n        else if (!JSON.parse(sessionStorage.getItem(\"user\")).isAdmin) {\r\n            this.props.history.push(\"/\");\r\n        }\r\n\r\n        //create connection to the server\r\n        this.socket = io.connect(\"http://localhost:3000\");\r\n    }\r\n\r\n\r\n\r\n    //get the data from inputs to the state\r\n    private setDescription = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const description = args.target.value;\r\n        let nameError;\r\n\r\n        nameError = validateDescription(description);\r\n\r\n        const errors = { ...this.state.errors };\r\n        errors.descriptionError = nameError;\r\n        this.setState({ errors });\r\n\r\n        const vacation = { ...this.state.vacation };\r\n        vacation.description = description;\r\n        this.setState({ vacation });\r\n\r\n    }\r\n\r\n    private setDestination = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const destination = args.target.value;\r\n        let nameError;\r\n\r\n\r\n        nameError = validateDestination(destination);\r\n\r\n        const errors = { ...this.state.errors };\r\n        errors.destinationError = nameError;\r\n        this.setState({ errors });\r\n\r\n        const vacation = { ...this.state.vacation };\r\n        vacation.destination = destination;\r\n        this.setState({ vacation });\r\n    }\r\n\r\n\r\n    private setImgUrl = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const img = args.target.value;\r\n        let nameError;\r\n\r\n\r\n        nameError = validateImgUrl(img);\r\n\r\n        const errors = { ...this.state.errors };\r\n        errors.imgError = nameError;\r\n        this.setState({ errors });\r\n\r\n        const vacation = { ...this.state.vacation };\r\n        vacation.img = img;\r\n        this.setState({ vacation });\r\n    }\r\n\r\n    private setStartingDate = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const startingDate = args.target.value;\r\n        let nameError;\r\n\r\n        nameError = validateStartingDate(startingDate);\r\n\r\n        const errors = { ...this.state.errors };\r\n        errors.startingDateError = nameError;\r\n        this.setState({ errors });\r\n\r\n        const vacation = { ...this.state.vacation };\r\n        vacation.startingDate = startingDate;\r\n        this.setState({ vacation });\r\n    }\r\n\r\n    private setEndingDate = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const endingDate = args.target.value;\r\n        let nameError;\r\n\r\n        nameError = validateEndingDate(endingDate);\r\n\r\n        const errors = { ...this.state.errors };\r\n        errors.endingDateError = nameError;\r\n        this.setState({ errors });\r\n\r\n        const vacation = { ...this.state.vacation };\r\n        vacation.endingDate = endingDate;\r\n        this.setState({ vacation });\r\n    }\r\n\r\n\r\n    private setPrice = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const price = +args.target.value;\r\n        let nameError;\r\n\r\n\r\n        nameError = validatePrice(price);\r\n\r\n        const errors = { ...this.state.errors };\r\n        errors.priceError = nameError;\r\n        this.setState({ errors });\r\n\r\n        const vacation = { ...this.state.vacation };\r\n        vacation.price = price;\r\n        this.setState({ vacation });\r\n    }\r\n\r\n    //check if the form is legal\r\n    private isFormLegal() {\r\n        for (const prop in this.state.errors) {\r\n            if (this.state.errors[prop].toString() !== \"\") {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //add a new vacation, to database and store, emit, and redirect to /login\r\n    private add = async () => {\r\n        try {\r\n            const response = await axios.post<VacationModel>(Config.serverUrl + \"/api/vacations\",\r\n                this.state.vacation);\r\n            const addedVacation = response.data;\r\n            addedVacation.follows = 0;\r\n            addedVacation.startingDate = StringToJson(addedVacation.startingDate);\r\n            addedVacation.endingDate = StringToJson(addedVacation.endingDate);\r\n            console.log(addedVacation);\r\n            store.dispatch({ type: ActionType.addOneVacation, payload: addedVacation });\r\n            this.socket.emit(\"Admin-added-a-vacation-from-client\", addedVacation);\r\n            this.props.history.push(\"/admin\");\r\n\r\n        }\r\n        catch (err) {\r\n            if ((err as AxiosError).response?.data === \"Your login session has expired\") {\r\n                // alert(err.response.data);\r\n                sessionStorage.clear();\r\n                alert((err as AxiosError).response?.data);\r\n                this.props.history.push(\"/login\");\r\n                return;\r\n            }\r\n\r\n            else if ((err as AxiosError).response?.data === \"You are not admin!\") {\r\n                this.props.history.push(\"/login\");\r\n                return;\r\n            }\r\n\r\n            else {\r\n                alert(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    //disconnect from the server\r\n    public componentWillUnmount(): void {\r\n        this.socket.disconnect();\r\n    }\r\n\r\n    public render() {\r\n\r\n        return (\r\n            <div className=\"EditVacation\">\r\n                <NavBar />\r\n                <div className=\"edit-container\">\r\n                    <h1>Add Vacation</h1>\r\n                    <br />\r\n                    <Form.Group controlId=\"formBasicText\">\r\n                        <Form.Label>Destination</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter destination\" value={this.state.vacation.destination || \"\"} onChange={this.setDestination} />\r\n                        <Form.Text className=\"text-muted\">\r\n                            {this.state.errors.destinationError==\"*\"? \"\" : this.state.errors.destinationError }\r\n                        </Form.Text>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"formBasicText\">\r\n                        <Form.Label>Description</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter description\" value={this.state.vacation.description || \"\"} onChange={this.setDescription} />\r\n                        <Form.Text className=\"text-muted\">\r\n                            {this.state.errors.descriptionError==\"*\"? \"\" : this.state.errors.descriptionError}\r\n                        </Form.Text>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"formBasicText\">\r\n                        <Form.Label>Image URL</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter img\" value={this.state.vacation.img || \"\"} onChange={this.setImgUrl} />\r\n                        <Form.Text className=\"text-muted\">\r\n                            {this.state.errors.imgError==\"*\"? \"\" : this.state.errors.imgError}\r\n                        </Form.Text>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"formBasicText\">\r\n                        <Form.Label>Start Date</Form.Label>\r\n                        <Form.Control type=\"date\" value={this.state.vacation.startingDate || \"\"} onChange={this.setStartingDate} />\r\n                        <Form.Text className=\"text-muted\">\r\n                            {this.state.errors.startingDateError==\"*\"? \"\" : this.state.errors.startingDateError}\r\n                        </Form.Text>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"formBasicText\">\r\n                        <Form.Label>Ending Date</Form.Label>\r\n                        <Form.Control type=\"date\" value={this.state.vacation.endingDate || \"\"} onChange={this.setEndingDate} />\r\n                        <Form.Text className=\"text-muted\">\r\n                            {this.state.errors.endingDateError==\"*\"? \"\" : this.state.errors.endingDateError}\r\n                        </Form.Text>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"formBasicText\">\r\n                        <Form.Label>Price</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter description\" value={this.state.vacation.price || \"\"} onChange={this.setPrice} />\r\n                        <Form.Text className=\"text-muted\">\r\n                            {this.state.errors.priceError==\"*\"? \"\" : this.state.errors.priceError}\r\n                        </Form.Text>\r\n                    </Form.Group>\r\n\r\n                    <Button variant=\"primary\" type=\"submit\" disabled={!this.isFormLegal()} onClick={this.add}>\r\n                        Submit\r\n                    </Button >\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","export function getRandomColor(){\r\n    const r=Math.floor(Math.random()*255);\r\n    const g=Math.floor(Math.random()*255);\r\n    const b=Math.floor(Math.random()*255);\r\n\r\n    return `rgba(${r},${g},${b},0.5)`;\r\n    \r\n}","import React, { Component } from \"react\";\r\nimport \"./reports.css\";\r\nimport { VacationModel } from \"../../models/vacation-model\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport { store } from \"../../redux/store\";\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { FollowModel } from \"../../models/follow-model\";\r\nimport io from \"socket.io-client\";\r\nimport axios, { AxiosError } from \"axios\";\r\nimport { ActionType } from \"../../redux/action-type\";\r\nimport { getRandomColor } from \"../../services/color\";\r\nimport { NavBar } from \"../nav-bar/navBar\";\r\nimport { Config } from \"../../config\";\r\n\r\ninterface reportsState {\r\n    vacations: VacationModel[];\r\n    follows: FollowModel[];\r\n    vacationsDestinations;\r\n    vacationsFollows;\r\n    colors;\r\n}\r\n\r\nexport class Reports extends Component<any, reportsState>{\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n    private socket;\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            vacations: store.getState().vacations,\r\n            follows: store.getState().follows,\r\n            vacationsDestinations: [],\r\n            vacationsFollows: [],\r\n            colors: []\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public async componentDidMount() {\r\n\r\n        //if there is no token, link to the login page\r\n        if (!sessionStorage.getItem(\"token\") || !sessionStorage.getItem(\"user\")) {\r\n            this.props.history.push(\"/login\");\r\n            return;\r\n        }\r\n\r\n        //if user is not admin, link to the Home page\r\n        else if (!JSON.parse(sessionStorage.getItem(\"user\")).isAdmin) {\r\n            this.props.history.push(\"/\");\r\n        }\r\n\r\n        //create connection to the server\r\n        this.socket = io.connect(\"http://localhost:3000\");\r\n\r\n        //if is there any changes in the store get the vacations and the follows from the new store.\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const vacations = store.getState().vacations;\r\n            const follows = store.getState().follows;\r\n            this.setState({ vacations, follows });\r\n\r\n        });\r\n\r\n        // if the store is empty get the data with ajax\r\n        if (this.state.vacations.length === 0 || this.state.follows.length===0) {\r\n            this.getDataWithAjax();\r\n        }\r\n\r\n        else {\r\n            const vacationsDestinations = [];\r\n            const vacationsFollows = [];\r\n            const colors = [];\r\n\r\n            this.state.vacations.forEach(v => {\r\n                if (v.follows > 0) {\r\n                    vacationsDestinations.push(v.destination);\r\n                    vacationsFollows.push(v.follows);\r\n                    colors.push(getRandomColor());\r\n                }\r\n\r\n            });\r\n\r\n            this.setState({ vacationsDestinations, vacationsFollows, colors });\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n        this.socket.on(\"added-vacation-from-server\", vacationAdded => {\r\n            this.getDataWithAjax();\r\n        });\r\n        this.socket.on(\"removed-vacation-from-server\", vacationRemoved => {\r\n            this.getDataWithAjax();\r\n        });\r\n        this.socket.on(\"follows-updated-from-server\", async () => {\r\n            this.getDataWithAjax();\r\n        });\r\n\r\n    }\r\n\r\n    private async getDataWithAjax() {\r\n        try {\r\n            const response = await\r\n                axios.get<VacationModel[]>(Config.serverUrl+\"/api/vacations\");\r\n            const vacations = response.data;\r\n\r\n            const response2 = await\r\n                axios.get<FollowModel[]>(Config.serverUrl+\"/api/follows\");\r\n            const follows = response2.data;\r\n\r\n            store.dispatch({ type: ActionType.SaveAllFollows, payload: follows });\r\n            store.dispatch({ type: ActionType.SaveAllVacations, payload: vacations });\r\n            store.dispatch({ type: ActionType.PrepareVacationsForUser });\r\n        }\r\n        catch (err) {\r\n            if ((err as AxiosError).response?.data === \"Your login session has expired\") {\r\n                sessionStorage.clear();\r\n                alert((err as AxiosError).response?.data);\r\n                this.props.history.push(\"/login\");\r\n                return;\r\n            }\r\n\r\n            else {\r\n                alert(err);\r\n            }\r\n\r\n        }\r\n\r\n\r\n        const vacationsDestinations = [];\r\n        const vacationsFollows = [];\r\n        const colors = [];\r\n\r\n\r\n\r\n        this.state.vacations.forEach(v => {\r\n            if (v.follows > 0) {\r\n                vacationsDestinations.push(v.destination);\r\n                vacationsFollows.push(v.follows);\r\n                colors.push(getRandomColor());\r\n            }\r\n\r\n        });\r\n\r\n\r\n        this.setState({ vacationsDestinations, vacationsFollows, colors });\r\n\r\n\r\n\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore();\r\n        this.socket.disconnect();\r\n    }\r\n\r\n\r\n    public render() {\r\n        return (\r\n\r\n            <div className=\"reports\">\r\n                <NavBar />\r\n                <br></br>\r\n                <Bar\r\n                    data={\r\n                        {\r\n                            labels: this.state.vacationsDestinations,\r\n                            datasets: [\r\n                                {\r\n                                    label: 'Follows',\r\n                                    data: this.state.vacationsFollows,\r\n                                    backgroundColor: this.state.colors\r\n                                }\r\n                            ]\r\n                        }\r\n                    }\r\n                    options={{\r\n                        scales: {\r\n                            yAxes: [{\r\n                                ticks: {\r\n                                    beginAtZero: true,\r\n                                    userCallback: function (label, index, labels) {\r\n                                        // when the floored value is the same as the value we have a whole number\r\n                                        if (Math.floor(label) === label) {\r\n                                            return label;\r\n                                        }\r\n\r\n                                    },\r\n                                }\r\n                            }]\r\n                        }\r\n                    }}\r\n                />\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React, { Component, ChangeEvent } from \"react\";\r\nimport \"./purchase.css\";\r\nimport { VacationModel } from \"../../models/vacation-model\";\r\nimport { PurchaseModel } from \"../../models/purchase-model\";\r\n\r\nimport axios from \"axios\";\r\n\r\nimport { Unsubscribe } from \"redux\";\r\nimport { store } from \"../../redux/store\";\r\nimport { ActionType } from \"../../redux/action-type\";\r\n\r\nimport { NavBar } from \"../nav-bar/navBar\";\r\nimport { JsonToString } from \"../../services/date\";\r\nimport { StringToJson } from \"../../services/date\";\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\n\r\nimport { Config } from \"../../config\";\r\n\r\ninterface VacationState {\r\n    vacations: VacationModel[];\r\n    purchase: PurchaseModel;\r\n    vacation: VacationModel;\r\n    // numberOfTickets: number;\r\n    // totalPrice: number;\r\n    errors: {\r\n        descriptionError: string,\r\n        destinationError: string,\r\n        imgError: string,\r\n        startingDateError: string,\r\n        endingDateError: string,\r\n        priceError: string\r\n    };\r\n}\r\n\r\nexport class Purchase extends Component<any, VacationState>{\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n\r\n        let numberOfTickets = 0;\r\n        let totalPrice = 0;\r\n\r\n        //get vacations from the store\r\n        this.state = {\r\n            vacations: store.getState().vacations,\r\n            purchase: {},\r\n            vacation: {},\r\n            // numberOfTickets: 0,\r\n            // totalPrice: 0,\r\n            errors: { descriptionError: \"\", destinationError: \"\", imgError: \"\", startingDateError: \"\", endingDateError: \"\", priceError: \"\" }\r\n        };\r\n\r\n    }\r\n\r\n\r\n\r\n    public async componentDidMount() {\r\n\r\n\r\n        //if is there any changes in the store get the vacations from the new store.\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const vacations = store.getState().vacations;\r\n            this.setState({ vacations });\r\n        });\r\n\r\n        //if there is no token, link to the login page\r\n        // if (!sessionStorage.getItem(\"token\") || !sessionStorage.getItem(\"user\")) {\r\n        //     this.props.history.push(\"/login\");\r\n        //     return;\r\n        // }\r\n\r\n        //if user is not admin, link to the Home page\r\n        // else if (!JSON.parse(sessionStorage.getItem(\"user\")).isAdmin) {\r\n        //     this.props.history.push(\"/\");\r\n        // }\r\n\r\n\r\n        try {\r\n            let vacation;\r\n\r\n            //if the store is not empty, find the vacation for edit and don't use axios at all\r\n            if (this.state.vacations.length > 0) {\r\n\r\n                for (let v of this.state.vacations) {\r\n                    if (v.vacationId === +this.props.match.params.id) {\r\n                        vacation = ({ ...v });\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            // if the store is empty, get the vacation for edit with axios\r\n            else {\r\n                const response = await\r\n                    axios.get<VacationModel>(`${Config.serverUrl}/api/vacations/${+this.props.match.params.id}`);\r\n                vacation = response.data;\r\n            }\r\n\r\n            //treatment with json date format\r\n            vacation.startingDate = JsonToString(vacation.startingDate);\r\n            vacation.endingDate = JsonToString(vacation.endingDate);\r\n            this.setState({ vacation });\r\n            // console.log(\"this.state.vacation\");\r\n            // console.log(this.state.vacation);\r\n            // console.log(vacation);\r\n\r\n            const purchase = { ...this.state.purchase };\r\n            purchase.vacationId = vacation.vacationId;\r\n            purchase.userName = JSON.parse(sessionStorage.getItem(\"user\")).userName;\r\n            purchase.priceForTicket = vacation.price;\r\n            this.setState({ purchase });\r\n            console.log(\"this.state.purchase\");\r\n            console.log(this.state.purchase);\r\n        }\r\n\r\n        catch (err) {\r\n            // if (err.response.data === \"Your login session has expired\") {\r\n            //     sessionStorage.clear();\r\n            //     alert(err.response.data);\r\n            //     this.props.history.push(\"/login\");\r\n            //     return;\r\n            // }\r\n\r\n            // else {\r\n            //     alert(err);\r\n            // }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    //disconnect from the server and the store\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore();\r\n    }\r\n\r\n    //get the data from inputs to the state\r\n    // public setDescription = (args: ChangeEvent<HTMLInputElement>) => {\r\n    //     const description = args.target.value;\r\n    //     let nameError;\r\n\r\n    //     nameError = validateDescription(description);\r\n\r\n    //     const errors = { ...this.state.errors };\r\n    //     errors.descriptionError = nameError;\r\n    //     this.setState({ errors });\r\n\r\n    //     const vacation = { ...this.state.vacation };\r\n    //     vacation.description = description;\r\n    //     this.setState({ vacation });\r\n    // }\r\n    // public setDestination = (args: ChangeEvent<HTMLInputElement>) => {\r\n    //     const destination = args.target.value;\r\n    //     let nameError;\r\n\r\n    //     nameError = validateDestination(destination);\r\n\r\n    //     const errors = { ...this.state.errors };\r\n    //     errors.destinationError = nameError;\r\n    //     this.setState({ errors });\r\n\r\n    //     const vacation = { ...this.state.vacation };\r\n    //     vacation.destination = destination;\r\n    //     this.setState({ vacation });\r\n    // }\r\n\r\n    // public setImgUrl = (args: ChangeEvent<HTMLInputElement>) => {\r\n    //     const img = args.target.value;\r\n    //     let nameError;\r\n\r\n    //     nameError = validateImgUrl(img);\r\n\r\n    //     const errors = { ...this.state.errors };\r\n    //     errors.imgError = nameError;\r\n    //     this.setState({ errors });\r\n\r\n    //     const vacation = { ...this.state.vacation };\r\n    //     vacation.img = img;\r\n    //     this.setState({ vacation });\r\n    // }\r\n    // public setStartingDate = (args: ChangeEvent<HTMLInputElement>) => {\r\n    //     const startingDate = args.target.value;\r\n    //     let nameError;\r\n\r\n    //     nameError = validateStartingDate(startingDate);\r\n\r\n    //     const errors = { ...this.state.errors };\r\n    //     errors.startingDateError = nameError;\r\n    //     this.setState({ errors });\r\n\r\n    //     const vacation = { ...this.state.vacation };\r\n    //     // vacation.startingDate=new Date(startingDate).toJSON();\r\n    //     vacation.startingDate = startingDate;\r\n    //     this.setState({ vacation });\r\n    // }\r\n    // public setEndingDate = (args: ChangeEvent<HTMLInputElement>) => {\r\n    //     const endingDate = args.target.value;\r\n    //     let nameError;\r\n\r\n    //     nameError = validateEndingDate(endingDate);\r\n\r\n    //     const errors = { ...this.state.errors };\r\n    //     errors.endingDateError = nameError;\r\n    //     this.setState({ errors });\r\n\r\n    //     const vacation = { ...this.state.vacation };\r\n    //     // vacation.endingDate = new Date(endingDate).toJSON();\r\n    //     vacation.endingDate = endingDate;\r\n    //     this.setState({ vacation });\r\n    // }\r\n\r\n    private setAmountOfTickets = (args: ChangeEvent<HTMLInputElement>) => {\r\n        console.log(\"this.state.purchase\");\r\n        console.log(this.state.purchase);\r\n\r\n        const purchase = { ...this.state.purchase };\r\n        purchase.tickets = +args.target.value;\r\n        purchase.totalPrice = purchase.tickets * this.state.vacation.price;\r\n        // console.log(purchase);\r\n\r\n        // const vacation = { ...this.state.vacation };\r\n        // const totalPrice= numberOfTickets*vacation.price;\r\n        this.setState({ purchase });\r\n        console.log(\"this.state.purchase\");\r\n        console.log(this.state.purchase);\r\n\r\n        // this.state.numberOfTickets=amount;\r\n        // let nameError;\r\n        // nameError = validatePrice(price);\r\n\r\n        // const errors = { ...this.state.errors };\r\n        // errors.priceError = nameError;\r\n        // this.setState({ errors });\r\n\r\n        // const vacation = { ...this.state.vacation };\r\n        // vacation.price = price;\r\n        // this.setState({ vacation });\r\n    }\r\n\r\n    private isFormLegal() {\r\n        if (this.state.purchase.totalPrice <= 0) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // public update = async () => {\r\n    //     try {\r\n    //         const vacationToUpdate = { ...this.state.vacation }\r\n    //         console.log(vacationToUpdate);\r\n    //         console.log(Config.serverUrl);\r\n    //         await axios.put(`${Config.serverUrl}/api/vacations/${+this.props.match.params.id}`,\r\n    //             vacationToUpdate);\r\n    //         console.log(\"after axios\");\r\n    //         vacationToUpdate.startingDate = StringToJson(vacationToUpdate.startingDate);\r\n    //         vacationToUpdate.endingDate = StringToJson(vacationToUpdate.endingDate);\r\n    //         store.dispatch({ type: ActionType.saveOneVacation, payload: vacationToUpdate });\r\n    //         this.socket.emit(\"Admin-updated-a-vacation-from-client\", vacationToUpdate);\r\n    //         this.props.history.push(\"/admin\");\r\n    //     }\r\n\r\n    //     catch (err) {\r\n    //         console.log(\"err\");\r\n    //         console.log(err);\r\n    //         if (err.response.data === \"Your login session has expired\") {\r\n    //             sessionStorage.clear();\r\n    //             alert(err.response.data);\r\n    //             this.props.history.push(\"/login\");\r\n    //             return;\r\n    //         }\r\n\r\n    //         else if (err.response.data === \"You are not admin!\") {\r\n    //             this.props.history.push(\"/login\");\r\n    //             return;\r\n    //         }\r\n\r\n    //         else {\r\n    //             alert(err);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    private send = async () => {\r\n        try {\r\n            const dateNow = new Date();\r\n            let purchase = { ...this.state.purchase };\r\n            purchase.date = dateNow;\r\n            console.log(\"send\")\r\n            console.log(\"purchase\");\r\n            console.log(purchase);\r\n            const response = await axios.post<PurchaseModel>(Config.serverUrl + \"/api/purchases\",\r\n                purchase);\r\n            console.log(\"response.data\");\r\n            console.log(response.data);\r\n            purchase = response.data;\r\n            this.props.history.push(\"/\");\r\n\r\n            // console.log(response);\r\n            // console.log(\"purchase\");\r\n            // console.log(purchase);\r\n        }\r\n        catch (err) {\r\n            console.log(err);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"purchaseVacation\">\r\n                <NavBar />\r\n                <div className=\"card-container\">\r\n                    <Card className=\"card-purchase\">\r\n                        <Card.Header >\r\n                            <div className=\"header\">\r\n                                <img className=\"img\" src={\"/assets/images/vacations/\" + this.state.vacation.img} />\r\n                                <span className=\"destination\">{this.state.vacation.destination || \"\"}</span>\r\n                            </div>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            <Card.Title>Description:</Card.Title>\r\n                            <Card.Text>\r\n                                {this.state.vacation.description || \"\"}\r\n                            </Card.Text>\r\n                            <Card.Title>Vacation Date:</Card.Title>\r\n                            <Card.Text>\r\n                                From {new Date(this.state.vacation.startingDate).toDateString()} to  {new Date(this.state.vacation.endingDate).toDateString()}\r\n                            </Card.Text>\r\n                            <Card.Title>One ticket cost:</Card.Title>\r\n                            <Card.Text>\r\n                                {this.state.vacation.price || \"\"}$\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                        <Card.Header >\r\n                            <h2>Purchase</h2>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            <Card.Text>\r\n                                Number Of tickets: <input type=\"text\" pattern=\"[0-9]*\" onInput={this.setAmountOfTickets.bind(this)} value={this.state.purchase.tickets} />\r\n                                {/* <input type=\"number\" value={this.state.numberOfTickets || \"\"} onChange={this.setAmountOfTickets} ></input> */}\r\n                            </Card.Text>\r\n                            <Card.Text>\r\n                                Total price: {this.state.purchase.totalPrice || \"\"}$\r\n                            </Card.Text>\r\n                            <Card.Text>\r\n                                <Button variant=\"primary\" type=\"submit\" disabled={!this.isFormLegal()} onClick={this.send} >\r\n                                    Buy\r\n                                </Button >\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n\r\n                    </Card>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component, ChangeEvent } from \"react\";\r\nimport \"./purchases.css\";\r\nimport { PurchaseModel } from \"../../models/purchase-model\";\r\n\r\nimport axios from \"axios\";\r\n\r\nimport { Unsubscribe } from \"redux\";\r\nimport { store } from \"../../redux/store\";\r\nimport { ActionType } from \"../../redux/action-type\";\r\n\r\nimport { NavBar } from \"../nav-bar/navBar\";\r\nimport { JsonToString } from \"../../services/date\";\r\nimport { StringToJson } from \"../../services/date\";\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\n\r\nimport { Config } from \"../../config\";\r\nimport { VacationModel } from \"../../models/vacation-model\";\r\n\r\ninterface PurchaseState {\r\n    purchases: PurchaseModel[];\r\n    vacations: VacationModel[];\r\n    // numberOfTickets: number;\r\n    // totalPrice: number;\r\n}\r\n\r\nexport class Purchases extends Component<any, PurchaseState>{\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n\r\n        let numberOfTickets = 0;\r\n        let totalPrice = 0;\r\n\r\n        //get vacations from the store\r\n        this.state = {\r\n            purchases: [],\r\n            vacations: []\r\n            // numberOfTickets: 0,\r\n            // totalPrice: 0,\r\n        };\r\n\r\n    }\r\n\r\n\r\n\r\n    public async componentDidMount() {\r\n\r\n\r\n        //if is there any changes in the store get the vacations from the new store.\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            // const purchases = store.getState().purchases;\r\n            const vacations = store.getState().vacations;\r\n            this.setState({ vacations });\r\n            // this.setState({ purchases });\r\n        });\r\n\r\n        let vacations = store.getState().vacations;\r\n        let purchases;\r\n\r\n        //if there is no token, link to the login page\r\n        // if (!sessionStorage.getItem(\"token\") || !sessionStorage.getItem(\"user\")) {\r\n        //     this.props.history.push(\"/login\");\r\n        //     return;\r\n        // }\r\n\r\n        //if user is not admin, link to the Home page\r\n        // else if (!JSON.parse(sessionStorage.getItem(\"user\")).isAdmin) {\r\n        //     this.props.history.push(\"/\");\r\n        // }\r\n\r\n\r\n        try {\r\n\r\n            //if the store is not empty, find the vacation for edit and don't use axios at all\r\n            if (this.state.purchases.length === 0) {\r\n                const response = await\r\n                    axios.get<PurchaseModel[]>(`${Config.serverUrl}/api/purchases`);\r\n                purchases = response.data;\r\n            }\r\n            if (this.state.vacations.length === 0) {\r\n                const response = await\r\n                    axios.get<VacationModel[]>(`${Config.serverUrl}/api/vacations`);\r\n                vacations = response.data;\r\n            }\r\n\r\n\r\n\r\n\r\n            //treatment with json date format\r\n            // vacation.startingDate = JsonToString(vacation.startingDate);\r\n            // vacation.endingDate = JsonToString(vacation.endingDate);\r\n\r\n            // console.log(\"this.state.vacation\");\r\n            // console.log(this.state.vacation);\r\n            // console.log(vacation);\r\n\r\n            // const purchase = { ...this.state.purchase };\r\n            // purchase.vacationId=vacation.vacationId;\r\n            // purchase.userName=JSON.parse(sessionStorage.getItem(\"user\")).userName;\r\n            // purchase.priceForTicket=vacation.price;\r\n            // this.setState({ purchase });\r\n            // console.log(\"this.state.purchase\");\r\n            // console.log(this.state.purchase);\r\n        }\r\n\r\n        catch (err) {\r\n            console.log(err);\r\n            // if (err.response.data === \"Your login session has expired\") {\r\n            //     sessionStorage.clear();\r\n            //     alert(err.response.data);\r\n            //     this.props.history.push(\"/login\");\r\n            //     return;\r\n            // }\r\n\r\n            // else {\r\n            //     alert(err);\r\n            // }\r\n\r\n        }\r\n        //     const errors = { ...this.state.errors };\r\n        this.setState({ vacations });\r\n\r\n        purchases.forEach(p => {\r\n            p.vacation = vacations.find(v => v.vacationId == p.vacationId);\r\n        });\r\n        this.setState({ purchases });\r\n        console.log(purchases);\r\n\r\n    }\r\n\r\n    //disconnect from the server and the store\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore();\r\n    }\r\n\r\n    //get the data from inputs to the state\r\n    // public setDescription = (args: ChangeEvent<HTMLInputElement>) => {\r\n    //     const description = args.target.value;\r\n    //     let nameError;\r\n\r\n    //     nameError = validateDescription(description);\r\n\r\n    //     const errors = { ...this.state.errors };\r\n    //     errors.descriptionError = nameError;\r\n    //     this.setState({ errors });\r\n\r\n    //     const vacation = { ...this.state.vacation };\r\n    //     vacation.description = description;\r\n    //     this.setState({ vacation });\r\n    // }\r\n    // public setDestination = (args: ChangeEvent<HTMLInputElement>) => {\r\n    //     const destination = args.target.value;\r\n    //     let nameError;\r\n\r\n    //     nameError = validateDestination(destination);\r\n\r\n    //     const errors = { ...this.state.errors };\r\n    //     errors.destinationError = nameError;\r\n    //     this.setState({ errors });\r\n\r\n    //     const vacation = { ...this.state.vacation };\r\n    //     vacation.destination = destination;\r\n    //     this.setState({ vacation });\r\n    // }\r\n\r\n    // public setImgUrl = (args: ChangeEvent<HTMLInputElement>) => {\r\n    //     const img = args.target.value;\r\n    //     let nameError;\r\n\r\n    //     nameError = validateImgUrl(img);\r\n\r\n    //     const errors = { ...this.state.errors };\r\n    //     errors.imgError = nameError;\r\n    //     this.setState({ errors });\r\n\r\n    //     const vacation = { ...this.state.vacation };\r\n    //     vacation.img = img;\r\n    //     this.setState({ vacation });\r\n    // }\r\n    // public setStartingDate = (args: ChangeEvent<HTMLInputElement>) => {\r\n    //     const startingDate = args.target.value;\r\n    //     let nameError;\r\n\r\n    //     nameError = validateStartingDate(startingDate);\r\n\r\n    //     const errors = { ...this.state.errors };\r\n    //     errors.startingDateError = nameError;\r\n    //     this.setState({ errors });\r\n\r\n    //     const vacation = { ...this.state.vacation };\r\n    //     // vacation.startingDate=new Date(startingDate).toJSON();\r\n    //     vacation.startingDate = startingDate;\r\n    //     this.setState({ vacation });\r\n    // }\r\n    // public setEndingDate = (args: ChangeEvent<HTMLInputElement>) => {\r\n    //     const endingDate = args.target.value;\r\n    //     let nameError;\r\n\r\n    //     nameError = validateEndingDate(endingDate);\r\n\r\n    //     const errors = { ...this.state.errors };\r\n    //     errors.endingDateError = nameError;\r\n    //     this.setState({ errors });\r\n\r\n    //     const vacation = { ...this.state.vacation };\r\n    //     // vacation.endingDate = new Date(endingDate).toJSON();\r\n    //     vacation.endingDate = endingDate;\r\n    //     this.setState({ vacation });\r\n    // }\r\n\r\n\r\n\r\n\r\n    // public update = async () => {\r\n    //     try {\r\n    //         const vacationToUpdate = { ...this.state.vacation }\r\n    //         console.log(vacationToUpdate);\r\n    //         console.log(Config.serverUrl);\r\n    //         await axios.put(`${Config.serverUrl}/api/vacations/${+this.props.match.params.id}`,\r\n    //             vacationToUpdate);\r\n    //         console.log(\"after axios\");\r\n    //         vacationToUpdate.startingDate = StringToJson(vacationToUpdate.startingDate);\r\n    //         vacationToUpdate.endingDate = StringToJson(vacationToUpdate.endingDate);\r\n    //         store.dispatch({ type: ActionType.saveOneVacation, payload: vacationToUpdate });\r\n    //         this.socket.emit(\"Admin-updated-a-vacation-from-client\", vacationToUpdate);\r\n    //         this.props.history.push(\"/admin\");\r\n    //     }\r\n\r\n    //     catch (err) {\r\n    //         console.log(\"err\");\r\n    //         console.log(err);\r\n    //         if (err.response.data === \"Your login session has expired\") {\r\n    //             sessionStorage.clear();\r\n    //             alert(err.response.data);\r\n    //             this.props.history.push(\"/login\");\r\n    //             return;\r\n    //         }\r\n\r\n    //         else if (err.response.data === \"You are not admin!\") {\r\n    //             this.props.history.push(\"/login\");\r\n    //             return;\r\n    //         }\r\n\r\n    //         else {\r\n    //             alert(err);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"purchases\">\r\n                <NavBar />\r\n\r\n                <div className=\"table-container\">\r\n                    <h1>Purchases</h1>\r\n                    <br />\r\n                    <Table striped bordered hover>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>User Name</th>\r\n                                <th>Number of Tickets</th>\r\n                                <th>Total price</th>\r\n                                <th>Vacation</th>\r\n                                <th>Date</th>\r\n                            </tr>\r\n                        </thead>\r\n                        {this.state.purchases.map(p =>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>{p.userName}</td>\r\n                                    <td>{p.tickets}</td>\r\n                                    <td>{p.totalPrice}</td>\r\n                                    <td>{p.vacation.destination}</td>\r\n                                    <td>{new Date(p.date).toDateString()}</td>\r\n\r\n                                </tr>\r\n                            </tbody>\r\n                        )}\r\n\r\n                    </Table>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport \"./app.css\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport { Home } from \"../home/home\"\r\nimport { Registration } from \"../registration/registration\";\r\nimport { Login } from \"../login/login\";\r\nimport axios from \"axios\";\r\nimport { Admin } from \"../admin/admin\";\r\nimport { EditVacation } from \"../edit-vacation/editVacation\";\r\nimport { AddVacation } from \"../add-vacation/addVacation\";\r\nimport { Reports } from \"../reports/reports\";\r\nimport { Purchase } from \"../purchase/purchase\";\r\nimport { Purchases } from \"../purchases/purchases\";\r\n\r\n\r\nexport class App extends Component<any>{\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        axios.interceptors.request.use(req => {\r\n            req.headers.authorization = 'Bearer '+sessionStorage.getItem(\"token\");\r\n            return req;\r\n        });\r\n\r\n        axios.interceptors.response.use(res => {\r\n            return res;\r\n          });\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"layout\">\r\n                <BrowserRouter>\r\n                    <Switch>\r\n                        <Route\r\n                            exact\r\n                            path={\"/\"}\r\n                            render={props => (\r\n                                <Home\r\n                                    {...props} key={\"layout\"}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Route\r\n                            exact\r\n                            path={\"/login\"} key={\"login\"}\r\n                            render={props => (\r\n                                <Login\r\n                                    {...props}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Route\r\n                            exact\r\n                            path={\"/registration\"} key={\"registration\"}\r\n                            render={props => (\r\n                                <Registration\r\n                                    {...props}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Route\r\n                            exact\r\n                            path={\"/purchase/:id\"} key={\"purchase\"}\r\n                            render={props => (\r\n                                <Purchase\r\n                                    {...props}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Route\r\n                            exact\r\n                            path={\"/purchases\"} key={\"purchases\"}\r\n                            render={props => (\r\n                                <Purchases\r\n                                    {...props}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Route\r\n                            exact\r\n                            path={\"/admin\"} key={\"registration\"}\r\n                            render={props => (\r\n                                <Admin\r\n                                    {...props}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Route\r\n                            exact\r\n                            path={\"/admin/add\"} key={\"add\"}\r\n                            render={props => (\r\n                                <AddVacation\r\n                                    {...props}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Route\r\n                            exact\r\n                            path={\"/admin/:id\"} key={\"edit\"}\r\n                            render={props => (\r\n                                <EditVacation\r\n                                    {...props}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Route\r\n                            exact\r\n                            path={\"/reports\"} key={\"reports\"}\r\n                            render={props => (\r\n                                <Reports\r\n                                    {...props}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Switch>\r\n                </BrowserRouter>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { App } from './components/app/app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}